{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","className","type","value","onChange","map","option","key","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","find","i","valueOf","base","response","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAEe,SAASA,EAAYC,GAAQ,IAEpCC,EAKAD,EALAC,gBACAC,EAIAF,EAJAE,iBACAC,EAGAH,EAHAG,iBACAC,EAEAJ,EAFAI,eACAC,EACAL,EADAK,OAEJ,OACI,yBAAKC,UAAW,gBACZ,2BAAOA,UAAU,QAAQC,KAAK,SAASC,MAAOH,EAAQI,SAAYL,IAClE,4BAAQI,MAASN,EAAkBO,SAAYN,GAC1CF,EAAgBS,KAAI,SAAAC,GAAM,OACvB,4BAAQC,IAAKD,EAAQH,MAAOG,GAASA,QCXzD,IAAME,EAAW,yCAyEFC,MAvEf,WAAgB,IASVC,EAAUC,EATD,EAEiCC,mBAAS,IAF1C,mBAENhB,EAFM,KAEWiB,EAFX,OAG2BD,qBAH3B,mBAGNE,EAHM,KAGQC,EAHR,OAIuBH,qBAJvB,mBAINI,EAJM,KAIMC,EAJN,OAK2BL,qBAL3B,mBAKNM,EALM,KAKQC,EALR,OAMeP,mBAAS,GANxB,mBAMNZ,EANM,KAMEoB,EANF,OAO2CR,oBAAS,GAPpD,mBAONS,EAPM,KAOgBC,EAPhB,KAiDb,OAvCGD,GACDV,EAAaX,EACbU,EAAWV,EAASkB,IAGpBR,EAAWV,EACXW,EAAaX,EAASkB,GAGxBK,qBAAU,WACRC,MAAMhB,GACLiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAOC,MAAK,SAAAC,GAAC,MAAoB,QAAhBA,EAAEC,aAC1DtB,EAAmB,CAACe,EAAKQ,MAAP,mBAAgBN,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKQ,MACrBnB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE5B,IAEHN,qBAAU,WACU,MAAfT,GAAqC,MAAdE,GACxBQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IACjDS,MAAK,SAAAY,GAAQ,OAAIA,EAASV,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAE1C,CAACF,EAAcE,IAahB,oCACE,uCACA,kBAACtB,EAAD,CACEE,gBAAmBA,EACnBC,iBAAoBiB,EACpBhB,iBAAoB,SAAAwC,GAAC,OAAIvB,EAAgBuB,EAAEC,OAAOpC,QAClDJ,eAjBuB,SAACuC,GAC5BlB,EAAUkB,EAAEC,OAAOpC,OACnBmB,GAAwB,IAgBpBtB,OAAUW,IAEZ,yBAAKV,UAAU,UAAf,KACA,kBAACP,EAAD,CACEE,gBAAmBA,EACnBC,iBAAoBmB,EACpBlB,iBAAoB,SAAAwC,GAAC,OAAIrB,EAAcqB,EAAEC,OAAOpC,QAChDJ,eApBqB,SAACuC,GAC1BlB,EAAUkB,EAAEC,OAAOpC,OACnBmB,GAAwB,IAmBpBtB,OAAUU,MCnElB8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.dc9ccd28.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CurrencyRow(props) {\r\n    const{\r\n        currencyOptions,\r\n        selectedCurrency,\r\n        onChangeCurrency,\r\n        onChangeAmount,\r\n        amount\r\n    } = props;\r\n    return (\r\n        <div className =\"currency-row\">\r\n            <input className=\"input\" type=\"number\" value={amount} onChange = {onChangeAmount}/>\r\n            <select value = {selectedCurrency} onChange = {onChangeCurrency}>\r\n                {currencyOptions.map(option => (\r\n                    <option key={option} value={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport CurrencyRow from \"./CurrencyRow\";\r\n\r\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\";\r\n\r\nfunction App() {\r\n  \r\n  const [currencyOptions, setCurrencyOptions] = useState([]);\r\n  const [fromCurrency, setFromCurrency] = useState();\r\n  const [toCurrency, setToCurrency] = useState();\r\n  const [exchangeRate, setExchangeRate] = useState();\r\n  const [amount, setAmount] = useState(1);\r\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\r\n\r\n  let toAmount, fromAmount;\r\n  if(amountInFromCurrency){\r\n    fromAmount = amount;\r\n    toAmount = amount * exchangeRate;\r\n  }\r\n  else{\r\n    toAmount = amount;\r\n    fromAmount = amount / exchangeRate;\r\n  }\r\n  \r\n  useEffect(() =>{\r\n    fetch(BASE_URL)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      const firstCurrency = Object.keys(data.rates).find(i => i.valueOf() === \"TRY\");\r\n      setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\r\n      setFromCurrency(data.base);\r\n      setToCurrency(firstCurrency);\r\n      setExchangeRate(data.rates[firstCurrency]);\r\n    });\r\n  }, []);\r\n  \r\n  useEffect(()=>{\r\n    if(fromCurrency !=null && toCurrency != null){\r\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\r\n      .then(response => response.json())\r\n      .then(data => setExchangeRate(data.rates[toCurrency]));\r\n    }\r\n  }, [fromCurrency, toCurrency]);\r\n\r\n  let handleFromAmountChange = (e) =>{\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(true);\r\n  }\r\n\r\n  let handleToAmountChange = (e) =>{\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Convert</h1>\r\n      <CurrencyRow\r\n        currencyOptions = {currencyOptions}\r\n        selectedCurrency = {fromCurrency}\r\n        onChangeCurrency = {e => setFromCurrency(e.target.value)}\r\n        onChangeAmount = {handleFromAmountChange}\r\n        amount = {fromAmount}\r\n      />\r\n      <div className=\"equals\">=</div>\r\n      <CurrencyRow\r\n        currencyOptions = {currencyOptions}\r\n        selectedCurrency = {toCurrency}\r\n        onChangeCurrency = {e => setToCurrency(e.target.value)}\r\n        onChangeAmount = {handleToAmountChange}\r\n        amount = {toAmount}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}